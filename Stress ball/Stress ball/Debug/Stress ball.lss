
Stress ball.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005fb  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000549  00000000  00000000  00000893  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000326  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001104  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000319  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001471  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  74:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <LED_DelayWhenBClosed>:
    }
}

void LED_DelayWhenBClosed(void)
{
	TCNT1  = 0x0BDC;										// contain of TCNT = 3036 to reach at 65563 at 4 sec by CLK pre-scaler 64.
  7c:	8c ed       	ldi	r24, 0xDC	; 220
  7e:	9b e0       	ldi	r25, 0x0B	; 11
  80:	9d bd       	out	0x2d, r25	; 45
  82:	8c bd       	out	0x2c, r24	; 44
	TCCR1A = 0x00;
  84:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x03;											// 64 Pre-scaler ,normal mode ,T1
  86:	83 e0       	ldi	r24, 0x03	; 3
  88:	8e bd       	out	0x2e, r24	; 46

	while(((TIFR&(1<<TOV1))==0) & (Button_State == Closed)) // wait 4 sec if the button is closed
  8a:	21 e0       	ldi	r18, 0x01	; 1
	{
		if ((PINA & (1<<PA0))==0)							// If the pressure applied again --> reset the timer.
		{
			TCNT1  = 0x0BDC;
  8c:	4c ed       	ldi	r20, 0xDC	; 220
  8e:	5b e0       	ldi	r21, 0x0B	; 11
{
	TCNT1  = 0x0BDC;										// contain of TCNT = 3036 to reach at 65563 at 4 sec by CLK pre-scaler 64.
	TCCR1A = 0x00;
	TCCR1B = 0x03;											// 64 Pre-scaler ,normal mode ,T1

	while(((TIFR&(1<<TOV1))==0) & (Button_State == Closed)) // wait 4 sec if the button is closed
  90:	04 c0       	rjmp	.+8      	; 0x9a <LED_DelayWhenBClosed+0x1e>
	{
		if ((PINA & (1<<PA0))==0)							// If the pressure applied again --> reset the timer.
  92:	c8 99       	sbic	0x19, 0	; 25
  94:	02 c0       	rjmp	.+4      	; 0x9a <LED_DelayWhenBClosed+0x1e>
		{
			TCNT1  = 0x0BDC;
  96:	5d bd       	out	0x2d, r21	; 45
  98:	4c bd       	out	0x2c, r20	; 44
{
	TCNT1  = 0x0BDC;										// contain of TCNT = 3036 to reach at 65563 at 4 sec by CLK pre-scaler 64.
	TCCR1A = 0x00;
	TCCR1B = 0x03;											// 64 Pre-scaler ,normal mode ,T1

	while(((TIFR&(1<<TOV1))==0) & (Button_State == Closed)) // wait 4 sec if the button is closed
  9a:	88 b7       	in	r24, 0x38	; 56
  9c:	96 b3       	in	r25, 0x16	; 22
  9e:	82 fb       	bst	r24, 2
  a0:	88 27       	eor	r24, r24
  a2:	80 f9       	bld	r24, 0
  a4:	82 17       	cp	r24, r18
  a6:	19 f0       	breq	.+6      	; 0xae <LED_DelayWhenBClosed+0x32>
  a8:	91 70       	andi	r25, 0x01	; 1
  aa:	92 13       	cpse	r25, r18
  ac:	f2 cf       	rjmp	.-28     	; 0x92 <LED_DelayWhenBClosed+0x16>
		if ((PINA & (1<<PA0))==0)							// If the pressure applied again --> reset the timer.
		{
			TCNT1  = 0x0BDC;
		}
	}
	TCCR1B = 0x00;											// stop timer1
  ae:	1e bc       	out	0x2e, r1	; 46
	TIFR |= (1<<TOV1);										// clear TOV1
  b0:	88 b7       	in	r24, 0x38	; 56
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	88 bf       	out	0x38, r24	; 56
  b6:	08 95       	ret

000000b8 <LED_DelayWhenBOpen>:
}

/****** if the the button closed when this delay is runing return to the normal state ******/
void LED_DelayWhenBOpen(void)
{
	TCNT1  = 0x0BDC;
  b8:	8c ed       	ldi	r24, 0xDC	; 220
  ba:	9b e0       	ldi	r25, 0x0B	; 11
  bc:	9d bd       	out	0x2d, r25	; 45
  be:	8c bd       	out	0x2c, r24	; 44
	TCCR1A = 0x00;
  c0:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x03;
  c2:	83 e0       	ldi	r24, 0x03	; 3
  c4:	8e bd       	out	0x2e, r24	; 46

	while((TIFR&(1<<TOV1))==0)
	{
		if((Button_State == Closed) & ((PINA & (1<<PA0))==0))
  c6:	21 e0       	ldi	r18, 0x01	; 1
{
	TCNT1  = 0x0BDC;
	TCCR1A = 0x00;
	TCCR1B = 0x03;

	while((TIFR&(1<<TOV1))==0)
  c8:	0f c0       	rjmp	.+30     	; 0xe8 <LED_DelayWhenBOpen+0x30>
	{
		if((Button_State == Closed) & ((PINA & (1<<PA0))==0))
  ca:	86 b3       	in	r24, 0x16	; 22
  cc:	99 b3       	in	r25, 0x19	; 25
  ce:	81 70       	andi	r24, 0x01	; 1
  d0:	82 17       	cp	r24, r18
  d2:	51 f0       	breq	.+20     	; 0xe8 <LED_DelayWhenBOpen+0x30>
  d4:	91 70       	andi	r25, 0x01	; 1
  d6:	92 17       	cp	r25, r18
  d8:	39 f0       	breq	.+14     	; 0xe8 <LED_DelayWhenBOpen+0x30>
		{
			LED_DelayWhenBClosed();
  da:	0e 94 3e 00 	call	0x7c	; 0x7c <LED_DelayWhenBClosed>
			TCCR1B = 0x00;
  de:	1e bc       	out	0x2e, r1	; 46
			TIFR |= (1<<TOV1);
  e0:	88 b7       	in	r24, 0x38	; 56
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	88 bf       	out	0x38, r24	; 56
			return;
  e6:	08 95       	ret
{
	TCNT1  = 0x0BDC;
	TCCR1A = 0x00;
	TCCR1B = 0x03;

	while((TIFR&(1<<TOV1))==0)
  e8:	08 b6       	in	r0, 0x38	; 56
  ea:	02 fe       	sbrs	r0, 2
  ec:	ee cf       	rjmp	.-36     	; 0xca <LED_DelayWhenBOpen+0x12>
			TCCR1B = 0x00;
			TIFR |= (1<<TOV1);
			return;
		}
	}
	TCCR1B = 0x00;
  ee:	1e bc       	out	0x2e, r1	; 46
	TIFR |= (1<<TOV1);
  f0:	88 b7       	in	r24, 0x38	; 56
  f2:	84 60       	ori	r24, 0x04	; 4
  f4:	88 bf       	out	0x38, r24	; 56
  f6:	08 95       	ret

000000f8 <Pressure_LongCheckwhenBOpen>:
}

/*This function used to check the press time if achieve the target the Led become on */
void Pressure_LongCheckwhenBOpen(void)
{
	TCNT1  = 0x0BDC;
  f8:	8c ed       	ldi	r24, 0xDC	; 220
  fa:	9b e0       	ldi	r25, 0x0B	; 11
  fc:	9d bd       	out	0x2d, r25	; 45
  fe:	8c bd       	out	0x2c, r24	; 44
	TCCR1A = 0x00;
 100:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x03;
 102:	83 e0       	ldi	r24, 0x03	; 3
 104:	8e bd       	out	0x2e, r24	; 46

	while((TIFR & (1<<TOV1))==0)
 106:	0b c0       	rjmp	.+22     	; 0x11e <Pressure_LongCheckwhenBOpen+0x26>
	{
		if((PINA & (1<<PA0))==Open)
 108:	c8 9b       	sbis	0x19, 0	; 25
 10a:	09 c0       	rjmp	.+18     	; 0x11e <Pressure_LongCheckwhenBOpen+0x26>
		{
			Test = 0;
 10c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 110:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			TCCR1B = 0x00;
 114:	1e bc       	out	0x2e, r1	; 46
			TIFR |= (1<<TOV1);
 116:	88 b7       	in	r24, 0x38	; 56
 118:	84 60       	ori	r24, 0x04	; 4
 11a:	88 bf       	out	0x38, r24	; 56

			return;
 11c:	08 95       	ret
{
	TCNT1  = 0x0BDC;
	TCCR1A = 0x00;
	TCCR1B = 0x03;

	while((TIFR & (1<<TOV1))==0)
 11e:	08 b6       	in	r0, 0x38	; 56
 120:	02 fe       	sbrs	r0, 2
 122:	f2 cf       	rjmp	.-28     	; 0x108 <Pressure_LongCheckwhenBOpen+0x10>
			TIFR |= (1<<TOV1);

			return;
		}
	}
	TCCR1B = 0x00;
 124:	1e bc       	out	0x2e, r1	; 46
	TIFR |= (1<<TOV1);
 126:	88 b7       	in	r24, 0x38	; 56
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	88 bf       	out	0x38, r24	; 56
	Test = 1;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 134:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 138:	08 95       	ret

0000013a <main>:

int Test ;

int main(void)
{
	DDRA &= ~(1<<PA0);
 13a:	d0 98       	cbi	0x1a, 0	; 26
	PORTA |= (1<<PA0);
 13c:	d8 9a       	sbi	0x1b, 0	; 27

	DDRB &= ~(1<<PB0);
 13e:	b8 98       	cbi	0x17, 0	; 23
	PORTB |= (1<<PB0);
 140:	c0 9a       	sbi	0x18, 0	; 24

	DDRD |= (1<<PD0);
 142:	88 9a       	sbi	0x11, 0	; 17
 144:	06 c0       	rjmp	.+12     	; 0x152 <main+0x18>
	
    while (1) 
    {
		while(Button_State == Closed)
		{
			if ((PINA & (1<<PA0))==0)
 146:	c8 99       	sbic	0x19, 0	; 25
 148:	04 c0       	rjmp	.+8      	; 0x152 <main+0x18>
			{
				LED_ON();
 14a:	90 9a       	sbi	0x12, 0	; 18
				LED_DelayWhenBClosed();
 14c:	0e 94 3e 00 	call	0x7c	; 0x7c <LED_DelayWhenBClosed>
				LED_OFF();
 150:	90 98       	cbi	0x12, 0	; 18

	DDRD |= (1<<PD0);
	
    while (1) 
    {
		while(Button_State == Closed)
 152:	b0 9b       	sbis	0x16, 0	; 22
 154:	f8 cf       	rjmp	.-16     	; 0x146 <main+0xc>
 156:	0e c0       	rjmp	.+28     	; 0x174 <main+0x3a>
				LED_OFF();
			}
		}
		while(Button_State == Open)
		{
			if((PINA & (1<<PA0))==Closed)
 158:	c8 99       	sbic	0x19, 0	; 25
 15a:	0c c0       	rjmp	.+24     	; 0x174 <main+0x3a>
			{	
				Pressure_LongCheckwhenBOpen();
 15c:	0e 94 7c 00 	call	0xf8	; 0xf8 <Pressure_LongCheckwhenBOpen>
				if (Test == 1)
 160:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 164:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	21 f4       	brne	.+8      	; 0x174 <main+0x3a>
				{
					LED_ON();
 16c:	90 9a       	sbi	0x12, 0	; 18
					LED_DelayWhenBOpen();
 16e:	0e 94 5c 00 	call	0xb8	; 0xb8 <LED_DelayWhenBOpen>
					LED_OFF();
 172:	90 98       	cbi	0x12, 0	; 18
				LED_ON();
				LED_DelayWhenBClosed();
				LED_OFF();
			}
		}
		while(Button_State == Open)
 174:	b0 99       	sbic	0x16, 0	; 22
 176:	f0 cf       	rjmp	.-32     	; 0x158 <main+0x1e>
 178:	ec cf       	rjmp	.-40     	; 0x152 <main+0x18>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
